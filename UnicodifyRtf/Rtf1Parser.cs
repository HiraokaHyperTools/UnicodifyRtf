//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rtf1Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Rtf1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Escape=1, Open=2, Close=3, NL=4, Text=5, Hex=6, Asterisk=7, Control=8, 
		Key=9, Value=10;
	public const int
		RULE_document = 0, RULE_node = 1, RULE_escape = 2;
	public static readonly string[] ruleNames = {
		"document", "node", "escape"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\'", "'{'", "'}'", null, null, null, "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Escape", "Open", "Close", "NL", "Text", "Hex", "Asterisk", "Control", 
		"Key", "Value"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rtf1Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Rtf1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Rtf1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Rtf1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Rtf1Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 62L) != 0)) {
				{
				{
				State = 6;
				node();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 12;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscapeContext escape() {
			return GetRuleContext<EscapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open() { return GetToken(Rtf1Parser.Open, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close() { return GetToken(Rtf1Parser.Close, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(Rtf1Parser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(Rtf1Parser.NL, 0); }
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_node);
		try {
			State = 19;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Escape:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14;
				escape();
				}
				break;
			case Open:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				Match(Open);
				}
				break;
			case Close:
				EnterOuterAlt(_localctx, 3);
				{
				State = 16;
				Match(Close);
				}
				break;
			case Text:
				EnterOuterAlt(_localctx, 4);
				{
				State = 17;
				Match(Text);
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 18;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Escape() { return GetToken(Rtf1Parser.Escape, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hex() { return GetToken(Rtf1Parser.Hex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(Rtf1Parser.Asterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Control() { return GetToken(Rtf1Parser.Control, 0); }
		public EscapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escape; } }
	}

	[RuleVersion(0)]
	public EscapeContext escape() {
		EscapeContext _localctx = new EscapeContext(Context, State);
		EnterRule(_localctx, 4, RULE_escape);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			Match(Escape);
			State = 22;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,25,2,0,7,0,2,1,7,1,2,2,7,2,1,0,5,0,8,8,0,10,0,12,0,11,9,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,3,1,20,8,1,1,2,1,2,1,2,1,2,0,0,3,0,2,4,0,1,1,0,6,
		8,26,0,9,1,0,0,0,2,19,1,0,0,0,4,21,1,0,0,0,6,8,3,2,1,0,7,6,1,0,0,0,8,11,
		1,0,0,0,9,7,1,0,0,0,9,10,1,0,0,0,10,12,1,0,0,0,11,9,1,0,0,0,12,13,5,0,
		0,1,13,1,1,0,0,0,14,20,3,4,2,0,15,20,5,2,0,0,16,20,5,3,0,0,17,20,5,5,0,
		0,18,20,5,4,0,0,19,14,1,0,0,0,19,15,1,0,0,0,19,16,1,0,0,0,19,17,1,0,0,
		0,19,18,1,0,0,0,20,3,1,0,0,0,21,22,5,1,0,0,22,23,7,0,0,0,23,5,1,0,0,0,
		2,9,19
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
