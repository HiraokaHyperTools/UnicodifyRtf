//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rtf1Lexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Rtf1Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Escape=1, Open=2, Close=3, NL=4, Text=5, Hex=6, Asterisk=7, Escaped=8, 
		Control=9, Key=10, Value=11;
	public const int
		EscapeMode=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EscapeMode"
	};

	public static readonly string[] ruleNames = {
		"Escape", "Open", "Close", "NL", "Text", "Hex", "Asterisk", "Escaped", 
		"Control", "Key", "Value"
	};


	public Rtf1Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Rtf1Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\'", "'{'", "'}'", null, null, null, "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Escape", "Open", "Close", "NL", "Text", "Hex", "Asterisk", "Escaped", 
		"Control", "Key", "Value"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rtf1Lexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Rtf1Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,72,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,
		2,1,3,4,3,34,8,3,11,3,12,3,35,1,4,4,4,39,8,4,11,4,12,4,40,1,5,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,3,8,59,8,8,1,8,1,8,
		1,9,4,9,64,8,9,11,9,12,9,65,1,10,4,10,69,8,10,11,10,12,10,70,0,0,11,2,
		1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,2,0,1,6,2,0,10,10,13,
		13,5,0,10,10,13,13,92,92,123,123,125,125,3,0,48,57,65,70,97,102,3,0,92,
		92,123,123,125,125,2,0,65,90,97,122,1,0,48,57,75,0,2,1,0,0,0,0,4,1,0,0,
		0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,1,12,1,0,0,0,1,14,1,0,0,0,1,16,
		1,0,0,0,1,18,1,0,0,0,1,20,1,0,0,0,1,22,1,0,0,0,2,24,1,0,0,0,4,28,1,0,0,
		0,6,30,1,0,0,0,8,33,1,0,0,0,10,38,1,0,0,0,12,42,1,0,0,0,14,48,1,0,0,0,
		16,52,1,0,0,0,18,56,1,0,0,0,20,63,1,0,0,0,22,68,1,0,0,0,24,25,5,92,0,0,
		25,26,1,0,0,0,26,27,6,0,0,0,27,3,1,0,0,0,28,29,5,123,0,0,29,5,1,0,0,0,
		30,31,5,125,0,0,31,7,1,0,0,0,32,34,7,0,0,0,33,32,1,0,0,0,34,35,1,0,0,0,
		35,33,1,0,0,0,35,36,1,0,0,0,36,9,1,0,0,0,37,39,8,1,0,0,38,37,1,0,0,0,39,
		40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,11,1,0,0,0,42,43,5,39,0,0,43,
		44,7,2,0,0,44,45,7,2,0,0,45,46,1,0,0,0,46,47,6,5,1,0,47,13,1,0,0,0,48,
		49,5,42,0,0,49,50,1,0,0,0,50,51,6,6,1,0,51,15,1,0,0,0,52,53,7,3,0,0,53,
		54,1,0,0,0,54,55,6,7,1,0,55,17,1,0,0,0,56,58,3,20,9,0,57,59,3,22,10,0,
		58,57,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,61,6,8,1,0,61,19,1,0,0,0,
		62,64,7,4,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,
		66,21,1,0,0,0,67,69,7,5,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,0,
		70,71,1,0,0,0,71,23,1,0,0,0,7,0,1,35,40,58,65,70,2,5,1,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
